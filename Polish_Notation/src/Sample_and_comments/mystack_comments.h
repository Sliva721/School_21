// ### Объяснение кода:

// 1. Предохранитель включения (`#ifndef`, `#define`, `#endif`): 
//    Данный блок используется для защиты от множественного включения заголовочного файла. 
//    Если файл `MYSTACK_H_` уже был определен, то последующий код до `#endif` будет проигнорирован.

// 2. Структура `st`:
//    - Эта структура представляет собой узел стека, где `char c` отвечает за хранение символа, 
//    а `struct st *next` — указатель на следующий узел в стеке, что позволяет создавать связный список.

// 3. Функция `push`:
//    - Данная функция добавляет новый элемент (символ) на верх стека. 
//    - Она принимает указатель на верхний узел стека и символ, который надо добавить.

// 4. Функция `delete`:
//    - Эта функция удаляет элемент с верхушки стека.
//    - Она принимает указатель на указатель на вершину стека, чтобы иметь возможность модифицировать стек.

// 5. Функция `priority`:
//    - Определяет приоритет оператора, передавая символ (например, `+`, `-`, `*`, `/` и т. д.) и возвращает его приоритет. 
//    Это может быть полезно для обработки операций в выражениях.

// 6. Функция `parsing_in_polish_notation`:
//    - Упоминается структура, которая используется для хранения операций, а также принимает входную строку и строку для вывода. 
//    Эту функцию можно использовать для преобразования математических выражений в польскую нотацию (или обратную польскую нотацию) с использованием стека.

#ifndef MYSTACK_H_  // Проверяем, не был ли уже определен файл заголовка MYSTACK_H_
#define MYSTACK_H_  // Определяем файл заголовка MYSTACK_H_

// Определяем структуру узла стека
struct st {
    char c;             // Хранит символ (данные)
    struct st *next;    // Указатель на следующий узел в стеке
};

// Функция для добавления элемента в стек
struct st *push(struct st *, char);  

// Функция для удаления элемента из стека
char delete (struct st **);  

// Функция для определения приоритета оператора
int priority(char);  

// Функция для парсинга строки в польскую нотацию
void parsing_in_polish_notation(struct st *operations, char *input_str, char *output_str);

#endif  // Завершаем условную компиляцию, чтобы предотвратить множественное включение