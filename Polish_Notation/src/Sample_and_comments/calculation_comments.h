// ### Объяснение:

// 1. Структуры `OPERATIONS` и `HEAD`: 
//    - `OPERATIONS` — это структура, которая хранит число, представляющее операцию (например, результат вычисления), и указатель на следующую операцию, что позволяет создать связный список.
//    - `HEAD` — это структура, содержащая указатель на первую операцию в списке, что позволяет работать с последовательностью операций через один указатель.

// 2. Функции:
//    - `counter`: Вероятно, отвечает за вычисления на основе входной строки и списка операций.
//    - `init`: Эта функция инициализирует структуру `HEAD`, что полезно перед использованием связанного списка.
//    - `pushing`: Добавляет новую операцию в список, позволяя накапливать вычисления.
//    - `pop`: Удаляет последнюю операцию и возвращает ее результат, что может быть полезно для работы со стеком.
//    - `add_func_for_graph`: Судя по названию, эта функция может быть предназначена для визуализации данных (например, построения графиков на основе операций).


#ifndef CALCULATION_H_  // Условная компиляция для предотвращения повторного включения файла.
#define CALCULATION_H_

// Определение структуры OPERATIONS, которая будет хранить результат операции и указатель на следующую операцию.
typedef struct OPERATIONS {
    double oper;  // Числовое значение операции.
    struct OPERATIONS *point;  // Указатель на следующую операцию в цепочке.
} OPERATIONS;

// Определение структуры HEAD, которая будет использоваться как заголовок для списка операций.
typedef struct HEAD {
    struct OPERATIONS *point;  // Указатель на первый элемент списка операций.
} HEAD;

// Объявление функции, которая будет выполнять подсчет (возможно, вычисление) на основании строки вывода, 
// указателя на заголовок списка операций и переменной x.
double counter(char *output_str, HEAD *head, double x);

// Объявление функции инициализации головы списка операций, 
// которая может выделить память для списка и установить начальные значения указателей.
void init(HEAD *head);

// Объявление функции добавления операции в список. 
// Принимает значение операции (символ) и указатель на голову списка.
void pushing(double sym, HEAD *head);

// Объявление функции, которая удаляет последнюю добавленную операцию и возвращает её значение.
double pop(HEAD *head);

// Объявление функции для добавления функции на граф (по всей видимости, для визуализации результатов).
// Принимает массив строк (граф), его размеры (высота и ширина), строку для вывода и указатель на голову списка операций.
void add_func_for_graph(char **graph, int height, int width, char *out, HEAD *head);

#endif  // CALCULATION_H_
